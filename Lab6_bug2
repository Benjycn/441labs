import RPi.GPIO as GPIO
import time

# test shift register code, problem 2, referenced module 5 last page

"""
GPIO.setmode(GPIO.BCM)
serialPin, latchPin, clockPin = 23, 24, 25

GPIO.setup(serialPin, GPIO.OUT)
GPIO.setup(latchPin, GPIO.OUT, initial=0)
GPIO.setup(clockPin, GPIO.OUT, initial=0)

def ping(p):
    GPIO.output(p, 1)
    time.sleep(0)
    GPIO.output(p, 0)

def shiftByte(b):
    for i in range(8):
        GPIO.output(serialPin, b & (1 << i))
        ping(clockPin)
    ping(latchPin)

try:
    while 1:
        for i in range(2**8):
            shiftByte(i)
            time.sleep(0.5)
except KeyboardInterrupt:
    GPIO.cleanup()
"""

# referenced module 2, page 86 for classes and objects example
class Shifter:
    def __init__(self, serialPin, latchPin, clockPin): # instantiation
        # constructor
        self.serialPin = serialPin
        self.latchPin = latchPin
        self.clockPin = clockPin

        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.serialPin, GPIO.OUT)
        GPIO.setup(self.latchPin, GPIO.OUT, initial=0)
        GPIO.setup(self.clockPin, GPIO.OUT, initial=0)

# referenced module 2, page 92, private vs public class variables/methods
    def __ping(self, p): # private
        GPIO.output(p, 1)
        time.sleep(0)
        GPIO.output(p, 0)

    def shiftByte(self, b): # public
        for i in range(8):
            GPIO.output(self.serialPin, b & (1 << i))
            self.__ping(self.clockPin)
        self.__ping(self.latchPin)




# 4 - random walk
import RPi.GPIO as GPIO
import time
import random
# import class, https://www.geeksforgeeks.org/python/how-to-import-a-class-from-another-file-in-python/
#from shifter import Shifter 


"""
bug = Shifter(serialPin=23, latchPin=24, clockPin=25)

try:
    position = 0  
    leds = 8 

    while True:
        # leveraged chatgpt to learn the bitwise left shift 
        # --> moves 1 bit to left by position, so that only 1 LED on 
        led_pattern = 1 << position
        bug.shiftByte(led_pattern)

        # random between -1 or +1 position, https://www.geeksforgeeks.org/python/random-choices-method-in-python/ 
        step = random.choice([-1, 1])
        position += step

        if position < 0:
            position = 0
        elif position > leds - 1:
            position = leds - 1

        time.sleep(0.05)

except KeyboardInterrupt:
    GPIO.cleanup()
"""


import threading

class Bug:
    def __init__(self, timestep=0.1, x=3, isWrapOn=False):
        self.timestep = timestep
        self.x = x
        self.isWrapOn = isWrapOn
        self.__shifter = Shifter(23, 24, 25)   # private Shifter object
        self._running = False
        self._thread = None          # background thread reference

    def __run(self):
        """Private loop that moves the LED while running."""
        while self._running:
            self.__shifter.write_led(self.x)
            time.sleep(self.timestep)

            # Example logic: move to the right
            self.x += 1

            # Handle wrapping or edge stopping
            if self.x > 7:
                if self.isWrapOn:
                    self.x = 0
                else:
                    self.x = 7
                    self.stop()

        # Once stopped, turn off LED
        self.__shifter.clear()

    def start(self):
        """Start moving the LED in a background thread."""
        if not self._running:
            self._running = True
            self._thread = threading.Thread(target=self.__run, daemon=True)
            self._thread.start()
            print("Bug started")

    def stop(self):
        """Stop LED movement and turn off display."""
        if self._running:
            self._running = False
            print("Bug stopped")
            self.__shifter.clear()







#import RPi.GPIO as GPIO
#import time
#from lightnightbug import Bug  

s1 = 17 
s2 = 27 
s3 = 22 

GPIO.setmode(GPIO.BCM)
GPIO.setup(s1, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(s2, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(s3, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

bug = Bug() # default timestep, position, wrapping

s2_og = GPIO.input(s2)

try:
    while True:
        s1_new = GPIO.input(s1)
        s2_new = GPIO.input(s2)
        s3_new = GPIO.input(s3)

        if s1_new:
            bug.start()
        else:
            bug.stop()

        if s2_new != s2_og:  
            bug.isWrapOn = not bug.isWrapOn
            s2_og = s2_new

        if s3_new:
            bug.timestep = 0.1 / 3 
        else:
            bug.timestep = 0.1    

        time.sleep(0.05)

except KeyboardInterrupt:
    print('\nExiting')
    bug.stop()
    GPIO.cleanup()
